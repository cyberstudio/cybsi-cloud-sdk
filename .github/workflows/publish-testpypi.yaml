name: Publish testpypi
on: push

jobs:
  build:
    name: Build distribution
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: make tools
      - name: Build
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/


  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    environment:
      name: testpypi

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: make install-poetry
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=testpypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")
          
          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://test.pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")
          
          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"
          
          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
      - name: Publish distribution to TestPyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry publish -r testpypi --skip-existing -u __token__ -p ${{ steps.mint-token.outputs.api-token }}
